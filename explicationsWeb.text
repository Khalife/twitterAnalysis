1 est ton client (ex : un navigateur Chrome ouvert sur un PC ou un navigateur Safari ouvert sur un iPad) – ce navigateur sait (entre autres) interpréter du HTML, du CSS, du JS
2 est une requête émise par ce navigateur (ex : GET /TwitterWorldCup) à l’intention du serveur web situé à l’adresse http://www.RKforever.yeah (par exemple)
3 est un serveur web (ex : node.js ou nginx ou Flask) qui écoute les requêtes arrivant à l’adresse (plus exactement sur la route) /TwitterWorldCup et qui initie des flux de communication avec un serveur applicatif en réaction à ces appels
4 est un flux de communication entre serveur web et serveur applicatif, qui peut (mais ce n’est pas obligatoire) contenir des informations utiles (ex : le nom d’une équipe dont on veut suivre les performances), généralement au format JSON
5 est un serveur applicatif (c’est le cœur du moteur du bidule), par exemple tournant sous Python, qui, en réponse à des flux de communications (« des ordres ») reçus exécute des actions « intelligentes » (ex : communiquer via l’API et Twython – 6 – avec les serveurs de Twitter – 7 – pour récupérer des informations, stocker – 8 – des informations sur un disque dur – 9 – ou toute autre opération telle qu’entraîner un modèle prédictif, effectuer une classification, etc.)
5 renvoie les résultats de ses actions via 4 au serveur web (généralement en JSON), qui les « sert » sous forme de pages HTML/CSS/JS – 10 – au client. Les pages servies peuvent être dotées de librairies (ex : D3.js) qui leur permettent de représenter les données facilement.

Les erreurs habituelles qu’il faut éviter :
-          Mettre 3 et 5 dans la même boîte : c’est effectivement faisable (en js avec node.js ou en Python avec Flask), mais généralement une mauvaise idée (tu ne veux pas que ton serveur web devienne poussif et faiblement réactif quand tu lances des calculs intensifs de learning)
-          Faire faire trop de choses à 1 : même si les navigateurs modernes sont capables de faire bcp de choses – dont du learning – moins on leur fait faire d’autres choses que de l’interprétation de HTML/CSS/JS et mieux ils se portent

